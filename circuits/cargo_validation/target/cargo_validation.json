{"noir_version":"1.0.0-beta.6+ef6d8667c524cc07e02bdbd142ab16bee25f1581","hash":"7172857171632537023","abi":{"parameters":[{"name":"unity_value","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"quantity","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"total_declared_value","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"}}},"bytecode":"H4sIAAAAAAAA/+VYS07DMBCdOElpE2DDJVja+bTODokF52jV9CiINeIQLDkFGxZcgKsg0VKPmDhuJdoXqVKfFDkd269vxmNnkoi2yNfXjbuP1lfs2g3uPFsUsClnI2/eBvo4GBL/K3lLPa2qdla0pjRzXTQLW+uqXkytsaa29bKwZdnays6aRTPTjanK1qzqplw54hinUctYMG/iuBX1ocAxUqcRF+MbAq7DuGVcOdYpUTcxE5E8bEuFCJ/gQHE9sUMtyD+5tMdlEqCuFJwo6INDifUnoN8ZTmPQb0S+DOF3DvabkYJ1KmAOxUBdI6AuYA4a5LrKc1b6y4jBa31xZjFlf0PFhQLFtl1twecnyI+Cz6UzKX4MBQDi7hQ/Y9dOiLqFzoT6G3B0nJCesFMtdMZAXRPCbaoMyHXEIbM3WdGFwxiYb1zUE/09TFhz6E1LjuF5Hy+f769P86Ucd+na+++vh7fnx1vZd72jj+PU2YBrZKIf+JZZMH8+DP/vw9RHJu5zr4/jnQTmRTt+K6/dN9a3S9tVoI85+UuG1Mt+/ADE57/P8hAAAA==","debug_symbols":"nZLLroMgEED/ZdYs5KWtv3JzY1CxISFoKDS5Mf33O4L0sWjSuJkjjGd0YFYYdR8vnXHTfIX2Z4XeG2vNpbPzoIKZHe6udwJl2QWvNW7BSx6tRXntArQuWkvgpmxML10X5RKD8pitCGg3IrHgZKzenu7kaVefVcb5LjMpH7r82hdVvfuCsyM+l8Wv6RG/ocU/Nwd8SUv/kp3e/F9cqcH4txsDDi1+UKQo8dAI1Ck2KZ5SPEOLRWmVQTNYBvoCITKwArZP64wmA4tsN3FT3qje6n1QpuiGl7kJf0vJlMla/DzoMXq9/XHKYQ//","file_map":{"50":{"source":"// Circuit to verify if the sum of individual values of all items is equal to the total amount declared\nfn main(unity_value: u64, quantity: u64, total_declared_value: u64) {\n    // Calculate the sum of item values\n    let sum: u64 = unity_value * quantity;\n\n    // Check if the sum is equal to the total declared\n    // Allowing a tiny error margin of 1 cent due to truncation\n    let difference: u64 = if sum > total_declared_value { sum - total_declared_value } else { total_declared_value - sum };\n\n    assert(difference <= 1);\n}\n\n#[test]\nfn test_main() {\n    // Test with consistent amount declared for the total values of the items\n    let unity_value = 500;\n    let quantity = 200;\n    let total_declared_value = 100000;\n    \n    main(unity_value, quantity, total_declared_value);\n}\n\n#[test(should_fail)]\nfn test_main_smaller_value_declared() {\n    // Test with amount declared smaller than total value of the items\n    let unity_value = 500;\n    let quantity = 200;\n    let total_declared_value = 80000;\n    \n    main(unity_value, quantity, total_declared_value);\n}\n\n#[test]\nfn test_main_diff_1_cent() {\n    // Test with amount declared within the range of 1 cent for total value of the items\n    let unity_value = 500;\n    let quantity = 200;\n    let total_declared_value = 100001;\n\n    main(unity_value, quantity, total_declared_value);\n}\n\n#[test(should_fail)]\nfn test_main_diff_2_cent() {\n    // Test with amount declared outside of the range of 1 cent for total value of the items\n    let unity_value = 500;\n    let quantity = 200;\n    let total_declared_value = 100002;\n\n    main(unity_value, quantity, total_declared_value);\n}","path":"/home/mateus/Desktop/ZKCargoPass/ZK-CargoPass/circuits/cargo_validation/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient"]}